{"name": "test_steps_demo[allure]", "status": "broken", "statusDetails": {"message": "OSError: [WinError 193] %1 不是有效的 Win32 应用程序。", "trace": "test_data1 = 'allure'\n\n    @allure.testcase(\"https://www.baidu.com的搜索功能\")\n    @pytest.mark.parametrize('test_data1', ['allure', 'pytest', 'unittest'])\n    def test_steps_demo(test_data1):\n        with allure.step('step one:打开浏览器'):\n>           driver = webdriver.Chrome(executable_path=(os.path.dirname(os.path.dirname(__file__)) + '/driver/chromedriver'))\n\ntest_allure_screen.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\selenium\\webdriver\\chrome\\webdriver.py:70: in __init__\n    super(WebDriver, self).__init__(DesiredCapabilities.CHROME['browserName'], \"goog\",\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\selenium\\webdriver\\chromium\\webdriver.py:89: in __init__\n    self.service.start()\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\selenium\\webdriver\\common\\service.py:71: in start\n    self.process = subprocess.Popen(cmd, env=self.env,\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python38\\lib\\subprocess.py:858: in __init__\n    self._execute_child(args, executable, preexec_fn, close_fds,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <subprocess.Popen object at 0x00000230C230D400>, args = 'C:\\\\Users\\\\user\\\\PycharmProjects\\\\testframework\\\\frameworkDemo/driver/chromedriver --port=58120'\nexecutable = None, preexec_fn = None, close_fds = False, pass_fds = (), cwd = None\nenv = environ({'TERM_SESSION_ID': '0fd9ebe4-49a2-47cb-bfa2-0eff3d262cc1', 'ZES_ENABLE_SYSMAN': '1', 'PROGRAMW6432': 'C:\\\\Pro...inal\\\\history\\\\testframework-history', 'PYTEST_CURRENT_TEST': 'test_allure_screen.py::test_steps_demo[allure] (call)'})\nstartupinfo = <subprocess.STARTUPINFO object at 0x00000230C230D5B0>, creationflags = 0, shell = False, p2cread = Handle(796), p2cwrite = 15, c2pread = -1\nc2pwrite = Handle(808), errread = -1, errwrite = Handle(772), unused_restore_signals = True, unused_start_new_session = False\n\n    def _execute_child(self, args, executable, preexec_fn, close_fds,\n                       pass_fds, cwd, env,\n                       startupinfo, creationflags, shell,\n                       p2cread, p2cwrite,\n                       c2pread, c2pwrite,\n                       errread, errwrite,\n                       unused_restore_signals, unused_start_new_session):\n        \"\"\"Execute program (MS Windows version)\"\"\"\n    \n        assert not pass_fds, \"pass_fds not supported on Windows.\"\n    \n        if isinstance(args, str):\n            pass\n        elif isinstance(args, bytes):\n            if shell:\n                raise TypeError('bytes args is not allowed on Windows')\n            args = list2cmdline([args])\n        elif isinstance(args, os.PathLike):\n            if shell:\n                raise TypeError('path-like args is not allowed when '\n                                'shell is true')\n            args = list2cmdline([args])\n        else:\n            args = list2cmdline(args)\n    \n        if executable is not None:\n            executable = os.fsdecode(executable)\n    \n        # Process startup details\n        if startupinfo is None:\n            startupinfo = STARTUPINFO()\n        else:\n            # bpo-34044: Copy STARTUPINFO since it is modified above,\n            # so the caller can reuse it multiple times.\n            startupinfo = startupinfo.copy()\n    \n        use_std_handles = -1 not in (p2cread, c2pwrite, errwrite)\n        if use_std_handles:\n            startupinfo.dwFlags |= _winapi.STARTF_USESTDHANDLES\n            startupinfo.hStdInput = p2cread\n            startupinfo.hStdOutput = c2pwrite\n            startupinfo.hStdError = errwrite\n    \n        attribute_list = startupinfo.lpAttributeList\n        have_handle_list = bool(attribute_list and\n                                \"handle_list\" in attribute_list and\n                                attribute_list[\"handle_list\"])\n    \n        # If we were given an handle_list or need to create one\n        if have_handle_list or (use_std_handles and close_fds):\n            if attribute_list is None:\n                attribute_list = startupinfo.lpAttributeList = {}\n            handle_list = attribute_list[\"handle_list\"] = \\\n                list(attribute_list.get(\"handle_list\", []))\n    \n            if use_std_handles:\n                handle_list += [int(p2cread), int(c2pwrite), int(errwrite)]\n    \n            handle_list[:] = self._filter_handle_list(handle_list)\n    \n            if handle_list:\n                if not close_fds:\n                    warnings.warn(\"startupinfo.lpAttributeList['handle_list'] \"\n                                  \"overriding close_fds\", RuntimeWarning)\n    \n                # When using the handle_list we always request to inherit\n                # handles but the only handles that will be inherited are\n                # the ones in the handle_list\n                close_fds = False\n    \n        if shell:\n            startupinfo.dwFlags |= _winapi.STARTF_USESHOWWINDOW\n            startupinfo.wShowWindow = _winapi.SW_HIDE\n            comspec = os.environ.get(\"COMSPEC\", \"cmd.exe\")\n            args = '{} /c \"{}\"'.format (comspec, args)\n    \n        if cwd is not None:\n            cwd = os.fsdecode(cwd)\n    \n        sys.audit(\"subprocess.Popen\", executable, args, cwd, env)\n    \n        # Start the process\n        try:\n>           hp, ht, pid, tid = _winapi.CreateProcess(executable, args,\n                                     # no special security\n                                     None, None,\n                                     int(not close_fds),\n                                     creationflags,\n                                     env,\n                                     cwd,\n                                     startupinfo)\nE                                    OSError: [WinError 193] %1 不是有效的 Win32 应用程序。\n\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python38\\lib\\subprocess.py:1311: OSError"}, "steps": [{"name": "step one:打开浏览器", "status": "broken", "statusDetails": {"message": "OSError: [WinError 193] %1 不是有效的 Win32 应用程序。\n", "trace": "  File \"C:\\Users\\user\\PycharmProjects\\testframework\\frameworkDemo\\allureDemo\\test_allure_screen.py\", line 21, in test_steps_demo\n    driver = webdriver.Chrome(executable_path=(os.path.dirname(os.path.dirname(__file__)) + '/driver/chromedriver'))\n  File \"C:\\Users\\user\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\selenium\\webdriver\\chrome\\webdriver.py\", line 70, in __init__\n    super(WebDriver, self).__init__(DesiredCapabilities.CHROME['browserName'], \"goog\",\n  File \"C:\\Users\\user\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\selenium\\webdriver\\chromium\\webdriver.py\", line 89, in __init__\n    self.service.start()\n  File \"C:\\Users\\user\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\selenium\\webdriver\\common\\service.py\", line 71, in start\n    self.process = subprocess.Popen(cmd, env=self.env,\n  File \"C:\\Users\\user\\AppData\\Local\\Programs\\Python\\Python38\\lib\\subprocess.py\", line 858, in __init__\n    self._execute_child(args, executable, preexec_fn, close_fds,\n  File \"C:\\Users\\user\\AppData\\Local\\Programs\\Python\\Python38\\lib\\subprocess.py\", line 1311, in _execute_child\n    hp, ht, pid, tid = _winapi.CreateProcess(executable, args,\n"}, "start": 1663668656073, "stop": 1663668656075}], "parameters": [{"name": "test_data1", "value": "'allure'"}], "start": 1663668656073, "stop": 1663668656080, "uuid": "fc879f24-32a2-4570-b412-31da3c9c21d3", "historyId": "1ac480cf677014b11bbf172f0d648149", "testCaseId": "147117651374c4764b0be5753fc9677b", "fullName": "test_allure_screen#test_steps_demo", "labels": [{"name": "suite", "value": "test_allure_screen"}, {"name": "host", "value": "IT00010182"}, {"name": "thread", "value": "2660-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_allure_screen"}], "links": [{"type": "test_case", "url": "https://www.baidu.com的搜索功能", "name": "https://www.baidu.com的搜索功能"}]}